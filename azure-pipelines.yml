trigger: none

# ---------- Stage 1: Build & Run on a specific Linux VM (no zipping) ----------
variables:
  # --- Docker/App (edit these as needed) ---
  containerName: 'pos-system-app:latest'        # the ONLY container we'll stop/remove (if it exists)
  imageName: 'pos-system-app'
  tag: 'latest'
  portHttp: '80:80'
  portApi: '3500:3500'
  healthUrl: 'http://localhost:80'       # optional health check

  # --- Remote VM (SSH service connection you create in Azure DevOps) ---
  sshServiceConnection: 'MyLinuxVM-SSH'  # name of your SSH service connection
  remoteWorkDir: '/home/azureuser/'  # VM folder where Dockerfile & app live

stages:
- stage: Build_And_Run_On_VM
  displayName: 'Stage 1: Build & Run on VM'
  jobs:
  - job: RunOnVM
    displayName: 'Run Docker flow on VM'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none  # not copying code; we assume VM already has Dockerfile in remoteWorkDir

    - task: SSH@0
      displayName: 'Build & run on VM'
      inputs:
        sshEndpoint: '$(sshServiceConnection)'
        runOptions: 'inline'
        inline: |
          set -e

          # Go to your app folder (must contain Dockerfile)
          cd "$(remoteWorkDir)"

          CONTAINER_NAME="$(containerName)"

          echo "==> Stop/remove ONLY the container named: $CONTAINER_NAME (if present)"
          EXISTING_ID=$(sudo docker ps -aq --filter "name=^${CONTAINER_NAME}$" || true)
          if [ -n "$EXISTING_ID" ]; then
            sudo docker stop "$EXISTING_ID"
            sudo docker rm "$EXISTING_ID"
          else
            echo "No existing container named $CONTAINER_NAME"
          fi

          echo "==> Build image"
          sudo docker build -t "$CONTAINER_NAME" .

          echo "==> Run container"
          sudo docker run -d \
            -p "$(portHttp)" \
            -p "$(portApi)" \
            --name "$(imageName)" \
            "$CONTAINER_NAME"