# azure-pipelines.yml (Stage 1 only)
trigger: none

variables:
  # === Change these as you like ===
  containerName: 'pos-system-app'          # the ONLY container we’ll stop/remove if it exists
  imageName: 'pos-system-app'
  tag: 'latest'
  portHttp: '80:80'
  portApi: '3500:3500'
  # optional health check URL (adjust to your app)
  healthUrl: 'http://localhost:80'

stages:
- stage: Build_And_Run_Container
  displayName: 'Stage 1: Build and run Docker container'
  jobs:
  - job: BuildRun
    displayName: 'Build & Run'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # (Optional) Ensure Docker is available on the agent
    - bash: |
        set -e
        if ! command -v docker >/dev/null 2>&1; then
          sudo apt-get update
          sudo apt-get install -y docker.io
        fi
        docker --version
      displayName: 'Ensure Docker is installed'

    # Stop & remove ONLY the specific container if it exists
    - bash: |
        set -e
        CONTAINER_NAME="$(containerName)"
        EXISTING_ID=$(docker ps -aq --filter "name=^${CONTAINER_NAME}$" || true)
        if [ -n "$EXISTING_ID" ]; then
          echo "Stopping existing container: $CONTAINER_NAME ($EXISTING_ID)"
          docker stop "$EXISTING_ID"
          docker rm "$EXISTING_ID"
        else
          echo "No existing container named $CONTAINER_NAME"
        fi
      displayName: 'Stop/remove only the specified container (if exists)'

    # Remove ONLY the specific image:tag if it exists
    - bash: |
        set -e
        IMAGE_TAG="$(imageName):$(tag)"
        IMG_ID=$(docker images -q "$IMAGE_TAG" || true)
        if [ -n "$IMG_ID" ]; then
          echo "Removing existing image: $IMAGE_TAG ($IMG_ID)"
          docker rmi -f "$IMG_ID"
        else
          echo "No existing image $IMAGE_TAG found"
        fi
      displayName: 'Remove only the specified image:tag (if exists)'

    # Build new image
    - bash: |
        set -e
        IMAGE_TAG="$(imageName):$(tag)"
        echo "Building $IMAGE_TAG ..."
        docker build -t "$IMAGE_TAG" .
      displayName: 'Docker build'

    # Run container with ports from variables
    - bash: |
        set -e
        IMAGE_TAG="$(imageName):$(tag)"
        CONTAINER_NAME="$(containerName)"
        echo "Running container $CONTAINER_NAME from $IMAGE_TAG ..."
        docker run -d \
          -p "$(portHttp)" \
          -p "$(portApi)" \
          --name "$CONTAINER_NAME" \
          "$IMAGE_TAG"
        echo "Containers now running:"
        docker ps
      displayName: 'Docker run'

    # (Optional) Simple health check so the job fails if the app didn’t start
    - bash: |
        set -e
        URL="$(healthUrl)"
        echo "Health check on $URL ..."
        ATTEMPTS=15
        SLEEP_SEC=4
        for i in $(seq 1 $ATTEMPTS); do
          if curl -sSf "$URL" >/dev/null 2>&1; then
            echo "✅ App responded at $URL"
            exit 0
          fi
          echo "Waiting for app... ($i/$ATTEMPTS)"
          sleep $SLEEP_SEC
        done
        echo "❌ App did not respond in time. Showing logs:"
        docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
        docker logs "$(containerName)" || true
        exit 1
      displayName: 'Health check'
