trigger: none

# ---------- Stage 1: Build & Run on a specific Linux VM (no zipping) ----------
variables:
  # --- Docker/App (edit these as needed) ---
  containerName: 'pos-system-app'   # <-- just the container name (no :tag)
  imageName: 'pos-system-app'       # image repo/name
  tag: 'latest'
  portHttp: '80:80'
  portApi: '3500:3500'
  healthUrl: 'http://localhost:80'       # optional health check

  # --- Remote VM (SSH service connection you create in Azure DevOps) ---
  sshServiceConnection: 'MyLinuxVM-SSH'  # name of your SSH service connection
  remoteWorkDir: '/home/azureuser/'  # VM folder where Dockerfile & app live

stages:
- stage: Build_And_Run_On_VM
  displayName: 'Stage 1: Build & Run on VM'
  jobs:
  - job: RunOnVM
    displayName: 'Run Docker flow on VM'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: SSH@0
      displayName: 'Build & run on VM'
      inputs:
        sshEndpoint: '$(sshServiceConnection)'
        runOptions: 'inline'
        failOnStdErr: false                    # <-- prevents false failures from docker warnings
        inline: |
          set -e

          cd "$(remoteWorkDir)"

          CONTAINER_NAME="$(containerName)"
          IMAGE_NAME="$(imageName)"
          IMAGE_TAG="$(tag)"
          IMAGE_REF="${IMAGE_NAME}:${IMAGE_TAG}"

          echo "==> Stop/remove ONLY container: ${CONTAINER_NAME} (if present)"
          EXISTING_ID=$(sudo -n docker ps -aq --filter "name=^${CONTAINER_NAME}$" || true)
          if [ -n "$EXISTING_ID" ]; then
            sudo -n docker stop "$EXISTING_ID" || true
            sudo -n docker rm "$EXISTING_ID" || true
          else
            echo "No existing container named ${CONTAINER_NAME}"
          fi

          echo "==> Remove ONLY image: ${IMAGE_REF} (if present)"
          IMG_ID=$(sudo -n docker images -q "${IMAGE_REF}" || true)
          if [ -n "$IMG_ID" ]; then
            sudo -n docker rmi -f "$IMG_ID" || true
          else
            echo "No existing image ${IMAGE_REF}"
          fi

          echo "==> Build image ${IMAGE_REF}"
          sudo -n docker build -t "${IMAGE_REF}" .

          echo "==> Run container ${CONTAINER_NAME} from ${IMAGE_REF}"
          sudo -n docker run -d \
            -p "$(portHttp)" \
            -p "$(portApi)" \
            --name "${CONTAINER_NAME}" \
            "${IMAGE_REF}"

          echo "==> Containers now running:"
          sudo -n docker ps

          # Success if we reached here
          exit 0